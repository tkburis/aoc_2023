func slice(str, i, j) {
    var ret = ""
    for (; i < j; i = i + 1) {
        ret = ret + str[i]
    }
    return ret
}

func split(str, delim) {
    var a = []
    var n = size(str)
    var start = 0

    var curr = 0
    for (; curr < n; curr = curr + 1) {
        if (curr + size(delim) <= n) {
            if (slice(str, curr, curr + size(delim)) == delim) {
                append(a, slice(str, start, curr))
                curr = curr + size(delim) - 1
                start = curr + 1
            }
        }
    }
    append(a, slice(str, start, curr))
    return a
}

var card_strength_ranked = {
    '2': 1,
    '3': 2,
    '4': 3,
    '5': 4,
    '6': 5,
    '7': 6,
    '8': 7,
    '9': 8,
    'T': 9,
    'J': 10,
    'Q': 11,
    'K': 12,
    'A': 13
}

func contains(a, x) {
    var n = size(a)
    for (var i = 0; i < n; i=i+1) {
        if (a[i] == x) {return true}
    }
    return false
}

func freqs(hand) {
    var found = []
    var dict = {}
    for (var i = 0; i < 5; i=i+1) {
        if (contains(found, hand[i])) {
            dict[hand[i]] = dict[hand[i]] + 1
        } else {
            append(found, hand[i])
            dict[hand[i]] = 1
        }
    }
    var num_found = size(found)
    var res = []
    for (var i = 0; i < num_found; i=i+1) {
        append(res, dict[found[i]])
    }
    var swapped = true
    var res_size = size(res)
    while (swapped) {
        swapped = false
        for (var i = 0; i < res_size-1; i=i+1) {
            if (res[i] > res[i+1]) {
                var temp = res[i]
                res[i] = res[i+1]
                res[i+1] = temp
                swapped = true
            }
        }
    }
    return res
}

func type_number(hand) {
    var cnts = freqs(hand)
    if (cnts == [5]) {
        return 7
    } else if (cnts == [1, 4]) {
        return 6
    } else if (cnts == [2, 3]) {
        return 5
    } else if (cnts == [1, 1, 3]) {
        return 4
    } else if (cnts == [1, 2, 2]) {
        return 3
    } else if (cnts == [1, 1, 1, 2]) {
        return 2
    } else if (cnts == [1, 1, 1, 1, 1]) {
        return 1
    }
}

func merge(a, b) {
    var res = []
    var i = 0
    var j = 0
    var n = size(a)
    var m = size(b)
    while (i < n or j < m) {
        if (i == n) {
            append(res, b[j])
            j = j + 1
        } else if (j == m) {
            append(res, a[i])
            i = i + 1
        } else {
            var t1 = type_number(a[i][0])
            # print "hand: " + a[i][0] + "; " + to_string(t1)
            var t2 = type_number(b[j][0])
            if (t1 < t2) {
                append(res, a[i])
                i = i + 1
            } else if (t1 > t2) {
                append(res, b[j])
                j = j + 1
            } else {
                for (var k = 0; k < 5; k=k+1) {
                    if (card_strength_ranked[a[i][0][k]] < card_strength_ranked[b[j][0][k]]) {
                        append(res, a[i])
                        i = i + 1
                        break
                    } else if (card_strength_ranked[a[i][0][k]] > card_strength_ranked[b[j][0][k]]) {
                        append(res, b[j])
                        j = j + 1
                        break
                    }
                }
            }
        }
    }
    return res
}

func merge_sort(a) {
    var n = size(a)
    if (n <= 1) {
        return a
    }
    var left = []
    var right = []
    var half = n/2
    for (var i = 0; i < n; i=i+1) {
        if (i < n/2) {
            append(left, a[i])
        } else {
            append(right, a[i])
        }
    }
    left = merge_sort(left)
    right = merge_sort(right)
    return merge(left, right)
}

var num_lines = to_number(input(""))

var hands_bids = []

for (var num_line = 0; num_line < num_lines; num_line=num_line+1) {
    append(hands_bids, split(input(""), " "))
}

var sorted = merge_sort(hands_bids)

var ans = 0
for (var i = 1; i <= num_lines; i=i+1) {
    ans = ans + to_number(sorted[i-1][1]) * i
}
print ans
